return require('lib/tap')(function (test)
  test("basic tcp server and client", function (print, p, expect, uv)
    local server = uv.new_tcp()
    uv.tcp_bind(server, "::", 0)
    uv.listen(server, 128, expect(function (self, err)
      p("server on connection", self)
      assert(self == server)
      assert(not err, err)
      uv.close(server)
    end))

    local address = uv.tcp_getsockname(server)
    p{server=server,address=address}

    local client = uv.new_tcp()
    local req = uv.tcp_connect(client, "::1", address.port, expect(function (self, err)
      p("client on connect", self, err)
      assert(self == client)
      assert(not err, err)
      uv.shutdown(client, expect(function (self, err)
        p("client on shutdown", self, err)
        assert(self == client)
        assert(not err, err)
        uv.close(client, expect(function (self)
          p("client on close", self)
          assert(self == client)
        end))
      end))
    end))
    p{client=client,req=req}
  end)

  test("tcp echo server and client", function (print, p, expect, uv)
    local server = uv.new_tcp()
    assert(uv.tcp_bind(server, "0.0.0.0", 0))
    assert(uv.listen(server, 1, expect(function ()
      local client = uv.new_tcp()
      assert(uv.accept(server, client))
      assert(uv.read_start(client, expect(function (self, err, data)
        p("server read", {err=err,data=data})
        assert(not err, err)
        assert(self == client)
        if data then
          assert(uv.write(client, data))
        else
          assert(uv.read_stop(client))
          uv.close(client)
          uv.close(server)
        end
      end, 2)))
    end)))

    local address = uv.tcp_getsockname(server)
    p{server=server,address=address}

    local socket = assert(uv.new_tcp())
    assert(uv.tcp_connect(socket, "127.0.0.1", address.port, expect(function ()
      assert(uv.read_start(socket, expect(function (self, err, data)
        p("client read", {err=err,data=data})
        assert(self == socket)
        assert(not err, err)
        assert(uv.read_stop(socket))
        uv.close(socket)
      end)))
      local req = assert(uv.write(socket, "Hello", function (self, err)
        p("client onwrite", self, err)
        assert(self == socket)
        assert(not err, err)
      end))
      p{socket=socket,req=req}
    end)))
  end)

end)
